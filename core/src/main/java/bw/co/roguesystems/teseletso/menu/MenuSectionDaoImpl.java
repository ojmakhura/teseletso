// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.teseletso.menu;

import bw.co.roguesystems.teseletso.auth.AuthorisationRepository;
import org.springframework.stereotype.Repository;

/**
 * @see MenuSection
 */
@Repository("menuSectionDao")
public class MenuSectionDaoImpl
    extends MenuSectionDaoBase
{
    
    public MenuSectionDaoImpl(
        AuthorisationRepository authorisationRepository,
        MenuSectionRepository menuSectionRepository
    ) {

        super(
            authorisationRepository,
            menuSectionRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toMenuSectionVO(
        MenuSection source,
        MenuSectionVO target)
    {
        // TODO verify behavior of toMenuSectionVO
        super.toMenuSectionVO(source, target);
        // WARNING! No conversion for target.authorisations (can't convert source.getAuthorisations():bw.co.roguesystems.teseletso.auth.Authorisation to bw.co.roguesystems.teseletso.auth.AuthorisationVO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MenuSectionVO toMenuSectionVO(final MenuSection entity)
    {
        // TODO verify behavior of toMenuSectionVO
        return super.toMenuSectionVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private MenuSection loadMenuSectionFromMenuSectionVO(MenuSectionVO menuSectionVO)
    {
        // TODO implement loadMenuSectionFromMenuSectionVO
        throw new UnsupportedOperationException("bw.co.roguesystems.teseletso.menu.loadMenuSectionFromMenuSectionVO(MenuSectionVO) not yet implemented.");

        /* A typical implementation looks like this:
        if (menuSectionVO.getId() == null)
        {
            return  MenuSection.Factory.newInstance();
        }
        else
        {
            return this.load(menuSectionVO.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public MenuSection menuSectionVOToEntity(MenuSectionVO menuSectionVO)
    {
        // TODO verify behavior of menuSectionVOToEntity
        MenuSection entity = this.loadMenuSectionFromMenuSectionVO(menuSectionVO);
        this.menuSectionVOToEntity(menuSectionVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void menuSectionVOToEntity(
        MenuSectionVO source,
        MenuSection target,
        boolean copyIfNull)
    {
        // TODO verify behavior of menuSectionVOToEntity
        super.menuSectionVOToEntity(source, target, copyIfNull);
    }
}